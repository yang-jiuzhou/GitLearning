<Application x:Class="HBBio.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:share="clr-namespace:HBBio.Share"
             StartupUri="SystemControl/View/SystemControlWin.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Dictionary/zh-cn.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryWindow.xaml"/>
                <ResourceDictionary Source="Dictionary/Color.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryButton.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryCheckBox.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryComboBox.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryDataGrid.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryGroupBox.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryLabel.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryListBox.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryPasswordBox.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryRadioButton.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryScrollBar.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryTabControl.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryTextBlock.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryTextBox.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryToolkitDateTimePicker.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryToolkitDoubleUpDown.xaml"/>
                <ResourceDictionary Source="Dictionary/DictionaryTreeView.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <Style x:Key="baseFont">
                <Setter Property="Control.FontSize" Value="14"/>
                <Setter Property="Control.Padding" Value="5"/>
            </Style>
            <Style x:Key="baseWrite" BasedOn="{StaticResource baseFont}">
                <Setter Property="Control.MinWidth" Value="75"/>
                <Style.Triggers>
                    <Trigger Property="Control.IsEnabled" Value="False">
                        <Setter Property="Control.Foreground" Value="#808080"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="Menu" BasedOn="{StaticResource baseFont}">
                <Setter Property="Border.Background" Value="{StaticResource GradientBackgroundRead}"/>
            </Style>
            <Style TargetType="MenuItem" BasedOn="{StaticResource baseFont}">
                <Setter Property="Border.Background" Value="{StaticResource GradientBackgroundRead}"/>
            </Style>

            <Style TargetType="xctk:IntegerUpDown">
                <Setter Property="Height" Value="35"/>
                <Setter Property="Width" Value="75"/>
                <Setter Property="Minimum" Value="0"/>
                <Setter Property="Value" Value="0"/>
                <Setter Property="Increment" Value="1"/>
            </Style>
            <Style TargetType="xctk:DoubleUpDown">
                <Setter Property="Height" Value="35"/>
                <Setter Property="Width" Value="75"/>
                <Setter Property="Minimum" Value="0.00"/>
                <Setter Property="Value" Value="0.00"/>
                <Setter Property="Increment" Value="1.00"/>
                <Setter Property="FormatString" Value="F2"/>
                <EventSetter Event="KeyUp" Handler="DoubleFlow_KeyUp"/>
                <EventSetter Event="LostFocus" Handler="DoubleUpDown_LostFocus"/>
            </Style>
            

            <Style TargetType="share:TextBoxDoubleEx" BasedOn="{StaticResource baseWrite}"/>

            <Style TargetType="share:IconButton">
                <Setter Property="MinHeight" Value="30"/>
                <Setter Property="MinWidth" Value="30"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="share:IconButton">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid x:Name="grid" Background="{TemplateBinding Background}">
                                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
                                    <Image x:Name="icon" Source="{TemplateBinding Image}" Height="{TemplateBinding ImageHeight}" Width="{TemplateBinding ImageWidth}"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{Binding MouseOverBackground,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconButton}}}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{Binding MouseOverBorderBrush,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconButton}}}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{Binding MouseDownBackground,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconButton}}}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{Binding MouseDownBorderBrush,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconButton}}}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.5" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="share:IconToggleButton">
                <Setter Property="MinHeight" Value="30"/>
                <Setter Property="MinWidth" Value="30"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="share:IconToggleButton">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid x:Name="grid" Background="{TemplateBinding Background}">
                                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
                                    <Image x:Name="icon" Source="{TemplateBinding Image}" Height="{TemplateBinding ImageHeight}" Width="{TemplateBinding ImageWidth}"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{Binding MouseOverBackground,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconToggleButton}}}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{Binding MouseOverBorderBrush,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconToggleButton}}}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{Binding MouseDownBackground,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconToggleButton}}}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{Binding MouseDownBorderBrush,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconToggleButton}}}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{Binding IsCheckedBackground,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconToggleButton}}}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{Binding IsCheckedBorderBrush,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type share:IconToggleButton}}}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.5" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
